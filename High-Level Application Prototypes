//Voice Dictation (Frame processing + MAC)

#include <iostream>
#include <vector>
using namespace std;

// Compute dot product of two vectors (core workload)
float vector_dot(const vector<float>& a, const vector<float>& b) {
    float acc = 0.0f;
    for (int i = 0; i < (int)a.size(); i++) {
        acc += a[i] * b[i]; // MAC operation
    }
    return acc;
}

int main() {
    // Example: 8-element feature frame vs template
    vector<float> frame = {1,2,3,4,5,6,7,8};
    vector<float> templ = {0.5,0.4,0.3,0.2,0.1,0, -0.1, -0.2};

    float score = vector_dot(frame, templ);
    cout << "Dot product score = " << score << endl;

    return 0;
}

//Voice Biometric Security

#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

float dot(const vector<float>& a, const vector<float>& b) {
    float acc = 0;
    for (int i = 0; i < (int)a.size(); i++) acc += a[i] * b[i];
    return acc;
}

float norm(const vector<float>& a) {
    return sqrt(dot(a,a)); // sqrt is expensive!
}

float cosine_similarity(const vector<float>& a, const vector<float>& b) {
    return dot(a,b) / (norm(a) * norm(b));
}

int main() {
    vector<float> v1 = {1,2,3,4};
    vector<float> v2 = {1,1,1,1};

    float sim = cosine_similarity(v1, v2);
    cout << "Cosine similarity = " << sim << endl;

    return 0;
}

//Translation + Read-Aloud

#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>
#include <cmath>
using namespace std;

// Dictionary lookup
string translate(const string& word, unordered_map<string,string>& dict) {
    if (dict.find(word) != dict.end()) return dict[word];
    return word; // fallback
}

// Simple waveform synthesis loop (sine wave samples)
void synthesize(int samples) {
    float phase = 0;
    float freq = 440; // A4 note
    float step = 2*M_PI*freq/16000; // assume 16kHz sample rate

    for (int i = 0; i < samples; i++) {
        float val = sin(phase); // costly math op
        cout << val << " ";     // just show a few samples
        phase += step;
    }
    cout << endl;
}

int main() {
    unordered_map<string,string> dict;
    dict["hello"] = "lumela";
    dict["money"] = "chelete";

    string word = "hello";
    string translated = translate(word, dict);
    cout << word << " -> " << translated << endl;

    cout << "Synthesized waveform: ";
    synthesize(8); // generate 8 samples

    return 0;
}
